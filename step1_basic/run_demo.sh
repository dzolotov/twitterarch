#!/bin/bash

echo "=== Шаг 1: Демо базовой архитектуры ==="
echo "Демонстрация проблемы популярных пользователей"
echo ""

# Start services
echo "Запуск сервисов..."
docker-compose up -d

# Wait for services to be ready
echo "Ожидание запуска сервисов..."
sleep 10

# Initialize Citus cluster
echo "Инициализация кластера Citus..."
./init_citus.sh

# Проверка наличия Python и aiohttp
if ! python3 -c "import aiohttp" 2>/dev/null; then
    echo "Установка aiohttp..."
    pip3 install aiohttp
fi

echo -e "\nЗагрузка реалистичных данных..."
echo "Создание популярных пользователей для демонстрации проблемы"

# Используем универсальный загрузчик с реалистичной моделью
python3 ../common/load_realistic_data.py \
    --url http://localhost:8001/api \
    --users 1000 \
    --popular 500 \
    --mega 2000

echo -e "\n=== Анализ производительности ==="
echo "Ключевые проблемы базовой архитектуры:"
echo ""
echo "1. ПРОБЛЕМА ПОПУЛЯРНЫХ ПОЛЬЗОВАТЕЛЕЙ:"
echo "   - Обычный твит: ~5 мс"
echo "   - Популярный (500 подписчиков): ~500 мс (100x медленнее!)"
echo "   - Мега-популярный (2000 подписчиков): ~2000 мс (400x медленнее!)"
echo ""
echo "2. АРХИТЕКТУРНЫЕ ПРОБЛЕМЫ:"
echo "   - Синхронное обновление ВСЕХ лент подписчиков"
echo "   - Линейная зависимость от количества подписчиков"
echo "   - Блокировка API на время обновления лент"
echo "   - JOIN запросы становятся дороже с ростом данных"
echo ""
echo "3. ОТСУТСТВИЕ ОПТИМИЗАЦИЙ:"
echo "   - Нет кэширования"
echo "   - Нет асинхронной обработки"
echo "   - Нет индексов для оптимизации"
echo ""
echo "В реальном Twitter у знаменитостей МИЛЛИОНЫ подписчиков!"
echo "Представьте твит от пользователя с 10М подписчиков..."

echo -e "\nАльтернативный тест: ./quick_demo.sh (быстрая версия)"
echo "Просмотр логов: docker-compose logs app"
echo "Остановка демо: docker-compose down"